

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               Int              @id @default(autoincrement()) @map("user_id")
  email            String           @unique
  passwordHash     String           @map("password_hash")
  displayName      String?          @map("display_name")
  dateOfBirth      DateTime?        @map("date_of_birth") @db.Date
  gender           String?
  heightCm         Int?             @map("height_cm")
  weightKg         Decimal?         @map("weight_kg") @db.Decimal(5, 2)
  createdAt        DateTime         @default(now()) @map("created_at")
  role             String           @default("user") // New field: "admin", "gym_owner", or "user"
  imageUrl         String?          @map("image_url") // New field for user profile image
  oauthProvider    String?          @map("oauth_provider")
  oauthId          String?          @map("oauth_id")
  plannedWorkouts  PlannedWorkout[]
  actualWorkouts   ActualWorkout[]
  userMemberships  UserMembership[]
  userBookings     UserBooking[]
  ownedGyms        Gym[]            @relation("GymOwner") // New relation for gym owners
  competitionHistory CompetitionUser[]
  dietEntries    DietEntry[]

  @@map("users")
}

model Exercise {
  id               Int               @id @default(autoincrement()) @map("exercise_id")
  name             String            @unique
  category         String?
  description      String?
  imageUrl         String?           @map("image_url") // New field for exercise image
  createdAt        DateTime          @default(now()) @map("created_at")
  plannedExercises PlannedExercise[]
  actualExercises  ActualExercise[]
  competitionTasks CompetitionTask[]  

  @@map("exercises")
}

model PlannedWorkout {
  id               Int               @id @default(autoincrement()) @map("planned_id")
  userId           Int               @map("user_id")
  title            String
  scheduledDate    DateTime          @map("scheduled_date") @db.Date
  estimatedDuration Int?             @map("estimated_duration")
  reminderSent     Boolean           @default(false) @map("reminder_sent")
  createdAt        DateTime          @default(now()) @map("created_at")
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  plannedExercises PlannedExercise[]
  actualWorkouts   ActualWorkout[]

  @@map("planned_workouts")
}

model PlannedExercise {
  id               Int              @id @default(autoincrement()) @map("planned_exercise_id")
  plannedId        Int              @map("planned_id")
  exerciseId       Int              @map("exercise_id")
  plannedSets      Int?             @map("planned_sets")
  plannedReps      Int?             @map("planned_reps")
  plannedWeight    Decimal?         @map("planned_weight") @db.Decimal(5, 2)
  plannedDuration  Int?             @map("planned_duration")
  plannedCalories  Int?             @map("planned_calories") // New field for calorie tracking
  plannedWorkout   PlannedWorkout   @relation(fields: [plannedId], references: [id], onDelete: Cascade)
  exercise         Exercise         @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  actualExercises  ActualExercise[]

  @@map("planned_exercises")
}

model ActualWorkout {
  id               Int              @id @default(autoincrement()) @map("actual_id")
  plannedId        Int?             @map("planned_id")
  userId           Int              @map("user_id")
  title            String
  completedDate    DateTime         @map("completed_date") @db.Date
  completedTime    DateTime?        @map("completed_time") @db.Time()
  actualDuration   Int?             @map("actual_duration")
  createdAt        DateTime         @default(now()) @map("created_at")
  user             User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  plannedWorkout   PlannedWorkout?  @relation(fields: [plannedId], references: [id], onDelete: SetNull)
  actualExercises  ActualExercise[]

  @@map("actual_workouts")
}

model ActualExercise {
  id                Int              @id @default(autoincrement()) @map("actual_exercise_id")
  actualId          Int              @map("actual_id")
  exerciseId        Int              @map("exercise_id")
  plannedExerciseId Int?             @map("planned_exercise_id")
  actualSets        Int?             @map("actual_sets")
  actualReps        Int?             @map("actual_reps")
  actualWeight      Decimal?         @map("actual_weight") @db.Decimal(5, 2)
  actualDuration    Int?             @map("actual_duration")
  actualCalories    Int?             @map("actual_calories") // New field for calorie tracking
  actualWorkout     ActualWorkout    @relation(fields: [actualId], references: [id], onDelete: Cascade)
  exercise          Exercise         @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
  plannedExercise   PlannedExercise? @relation(fields: [plannedExerciseId], references: [id], onDelete: SetNull)

  @@map("actual_exercises")
}

// Gym appointment booking system models

model Gym {
  id              Int               @id @default(autoincrement()) @map("gym_id")
  name            String
  address         String?
  description     String?
  contactInfo     String?           @map("contact_info")
  imageUrl        String?           @map("image_url")
  ownerId         Int?              @map("owner_id") // New field for gym ownership
  createdAt       DateTime          @default(now()) @map("created_at")
  owner           User?             @relation("GymOwner", fields: [ownerId], references: [id]) // Owner relation
  classes         GymClass[]
  membershipPlans MembershipPlan[]
  userMemberships UserMembership[]
  competitions    Competition[]  

  @@map("gyms")
}

model MembershipPlan {
  id                Int              @id @default(autoincrement()) @map("plan_id")
  gymId             Int              @map("gym_id")
  name              String
  description       String?
  durationDays      Int              @map("duration_days")
  price             Decimal          @db.Decimal(10, 2)
  maxBookingsPerWeek Int?            @map("max_bookings_per_week")
  isActive          Boolean          @default(true) @map("is_active")
  createdAt         DateTime         @default(now()) @map("created_at")
  gym               Gym              @relation(fields: [gymId], references: [id], onDelete: Cascade)
  userMemberships   UserMembership[]

  @@map("membership_plans")
}

model UserMembership {
  id                   Int                  @id @default(autoincrement()) @map("membership_id")
  userId               Int                  @map("user_id")
  gymId                Int                  @map("gym_id")
  planId               Int?                 @map("plan_id")
  startDate            DateTime             @map("start_date") @db.Date
  endDate              DateTime             @map("end_date") @db.Date
  status               String               // 'active', 'expired', 'cancelled'
  autoRenew            Boolean              @default(false) @map("auto_renew")
  bookingsUsedThisWeek Int                  @default(0) @map("bookings_used_this_week")
  lastBookingCountReset DateTime?           @map("last_booking_count_reset") @db.Date
  createdAt            DateTime             @default(now()) @map("created_at")
  user                 User                 @relation(fields: [userId], references: [id], onDelete: Cascade)
  gym                  Gym                  @relation(fields: [gymId], references: [id], onDelete: Cascade)
  membershipPlan       MembershipPlan?      @relation(fields: [planId], references: [id], onDelete: SetNull)
  membershipPayments   MembershipPayment[]
  userBookings         UserBooking[]

  @@map("user_memberships")
}

model MembershipPayment {
  id              Int            @id @default(autoincrement()) @map("payment_id")
  membershipId    Int            @map("membership_id")
  amount          Decimal        @db.Decimal(10, 2)
  paymentDate     DateTime       @map("payment_date")
  paymentMethod   String?        @map("payment_method")
  transactionId   String?        @map("transaction_id")
  status          String         // 'completed', 'pending', 'failed'
  createdAt       DateTime       @default(now()) @map("created_at")
  userMembership  UserMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)

  @@map("membership_payments")
}

model GymClass {
  id               Int             @id @default(autoincrement()) @map("class_id")
  gymId            Int             @map("gym_id")
  name             String
  description      String?
  maxCapacity      Int?            @map("max_capacity")
  durationMinutes  Int             @map("duration_minutes")
  imageUrl         String?         @map("image_url")
  membersOnly      Boolean         @default(false) @map("members_only")
  difficultyLevel  String?         @map("difficulty_level")
  isActive         Boolean         @default(true) @map("is_active")
  createdAt        DateTime        @default(now()) @map("created_at")
  gym              Gym             @relation(fields: [gymId], references: [id], onDelete: Cascade)
  schedules        ClassSchedule[]

  @@map("gym_classes")
}

model ClassSchedule {
  id                 Int           @id @default(autoincrement()) @map("schedule_id")
  classId            Int           @map("class_id")
  startTime          DateTime      @map("start_time")
  endTime            DateTime      @map("end_time")
  instructor         String?
  currentBookings    Int           @default(0) @map("current_bookings")
  isCancelled        Boolean       @default(false) @map("is_cancelled")
  cancellationReason String?       @map("cancellation_reason")
  createdAt          DateTime      @default(now()) @map("created_at")
  gymClass           GymClass      @relation(fields: [classId], references: [id], onDelete: Cascade)
  userBookings       UserBooking[]

  @@map("class_schedules")
}

model UserBooking {
  id                 Int            @id @default(autoincrement()) @map("booking_id")
  userId             Int            @map("user_id")
  membershipId       Int            @map("membership_id")
  scheduleId         Int            @map("schedule_id")
  bookingTime        DateTime       @default(now()) @map("booking_time")
  bookingStatus      String         @default("confirmed") @map("booking_status")
  cancellationReason String?        @map("cancellation_reason")
  attended           Boolean        @default(false)
  createdAt          DateTime       @default(now()) @map("created_at")
  user               User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  userMembership     UserMembership @relation(fields: [membershipId], references: [id], onDelete: Cascade)
  schedule           ClassSchedule  @relation(fields: [scheduleId], references: [id], onDelete: Cascade)

  @@map("user_bookings")
}

// Competition-related models

model Competition {
  id               Int                  @id @default(autoincrement()) @map("competition_id")
  gymId            Int                  @map("gym_id")
  name             String
  description      String?
  startDate        DateTime             @map("start_date")
  endDate          DateTime             @map("end_date")
  imageUrl         String?              @map("image_url")
  maxParticipants  Int?                 @map("max_participants")
  isActive         Boolean              @default(true) @map("is_active")
  createdAt        DateTime             @default(now()) @map("created_at")
  gym              Gym                  @relation(fields: [gymId], references: [id], onDelete: Cascade)
  competitionTasks CompetitionTask[]
  participants     CompetitionUser[]

  @@map("competitions")
}

model CompetitionTask {
  id               Int                   @id @default(autoincrement()) @map("task_id")
  competitionId    Int                   @map("competition_id")
  exerciseId       Int?                  @map("exercise_id") // Optional link to exercise
  name             String                // Task name (e.g., "Squat Challenge")
  description      String?
  targetValue      Decimal               @map("target_value") @db.Decimal(10, 2) // Target amount (e.g., 5000kg or 30km)
  unit             String                // Unit of measurement (e.g., "kg", "km", "reps")
  pointsValue      Int                   @default(100) @map("points_value") // Points earned for completion
  competition      Competition           @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  exercise         Exercise?             @relation(fields: [exerciseId], references: [id], onDelete: SetNull)
  userProgress     CompetitionProgress[]

  @@map("competition_tasks")
}

model CompetitionUser {
  id               Int                   @id @default(autoincrement()) @map("participant_id")
  userId           Int                   @map("user_id")
  competitionId    Int                   @map("competition_id")
  joinDate         DateTime              @default(now()) @map("join_date")
  totalPoints      Int                   @default(0) @map("total_points")
  completionPct    Decimal               @default(0) @map("completion_pct") @db.Decimal(5, 2)
  rank             Int?                  // Current rank in competition
  isActive         Boolean               @default(true) @map("is_active")
  user             User                  @relation(fields: [userId], references: [id], onDelete: Cascade)
  competition      Competition           @relation(fields: [competitionId], references: [id], onDelete: Cascade)
  taskProgress     CompetitionProgress[]

  @@unique([userId, competitionId]) // A user can join each competition only once
  @@map("competition_users")
}

model CompetitionProgress {
  id               Int                  @id @default(autoincrement()) @map("progress_id")
  participantId    Int                  @map("participant_id")
  taskId           Int                  @map("task_id")
  currentValue     Decimal              @default(0) @map("current_value") @db.Decimal(10, 2)
  isCompleted      Boolean              @default(false) @map("is_completed")
  completionDate   DateTime?            @map("completion_date")
  lastUpdated      DateTime             @default(now()) @map("last_updated")
  notes            String?
  participant      CompetitionUser      @relation(fields: [participantId], references: [id], onDelete: Cascade)
  task             CompetitionTask      @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@unique([participantId, taskId]) // One progress entry per participant per task
  @@map("competition_progress")
}

// Food Item model
model FoodItem {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  description String?
  caloriesPerUnit Decimal  @db.Decimal(10, 2)
  servingUnit String
  imageUrl    String?
  createdAt   DateTime     @default(now())
  
  // Relations
  dietEntries DietEntry[]

  @@map("food_items")
}

// Diet Entry model
model DietEntry {
  id             Int       @id @default(autoincrement())
  userId         Int
  foodId         Int
  quantity       Decimal   @db.Decimal(10, 2)
  calories       Decimal?  @db.Decimal(10, 2)
  consumptionDate DateTime @db.Date
  mealType       String?
  notes          String?
  createdAt      DateTime  @default(now())
  
  // Relations
  user           User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  foodItem       FoodItem  @relation(fields: [foodId], references: [id], onDelete: Cascade)

  @@map("diet_entries")
}